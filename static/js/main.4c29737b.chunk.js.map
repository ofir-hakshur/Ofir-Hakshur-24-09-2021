{"version":3,"sources":["config/index.js","components/home/home.consts.js","components/home/home.helpers.js","components/like/Like.jsx","components/like/index.js","actions/index.js","components/home/ButtonsWrapper.jsx","components/home/CurrentWeather.jsx","components/home/CurrentForecast.jsx","components/home/Search.jsx","components/home/Home.jsx","components/home/index.js","components/navbar/index.js","components/navbar/Navbar.jsx","components/favorites/Favorites.jsx","components/app/App.jsx","reducers/units.js","reducers/themes.js","reducers/currentCityWeather.js","reducers/currentDaily.js","reducers/reducers.consts.js","reducers/favoriteCities.js","reducers/currentCityName.js","reducers/index.js","index.js"],"names":["config","tempEndPoint","apikey","telAvivKey","baseRoute","autoCompleteApiEndPoint","currentWeatherEndPoint","dailyWeatherEndPoint","geoPositionEndPoint","ONE_SECOND","TEL_AVIV","FAHRENHEIT","CELSIUS","DAYS","dateToDayName","date","splitedDate","Date","getDay","consts","handleTemperature","units","fahrenheit","celsius","fahrenheitToCelsius","Number","parseFloat","toPrecision","handleTheme","themes","Like","display","className","changeCurrentCity","city","type","payload","changeCurrentDaily","daily","changeCityName","cityName","ButtonsWrapper","isCurrentCityInFavoriteList","useSelector","state","currentCityWeather","currentCityName","dispatch","useDispatch","onClick","hidden","CurrentWeather","length","Temperature","Imperial","Value","WeatherText","CurrentForecast","dailyWeather","currentDaily","_","isEmpty","DailyForecasts","map","e","Minimum","Maximum","EpochDate","Search","textBox","handleTextBoxOnChange","suggestedCities","handleCityOnClick","placeholder","value","onChange","currentTarget","LocalizedName","Key","Home","currentWeather","favoriteCities","useState","setSuggestedCities","setTextBox","currentCityKey","setCurrentCityKey","autoComplete","useCallback","debounce","handleAutocomplete","useEffect","navigator","geolocation","getCurrentPosition","geoLocationAllowed","geoLocationBlocked","textBoxValue","a","axios","get","params","q","results","data","cityKey","filter","obj","setForeCastWeather","favorite","position","coords","latitude","longitude","suggestedCitiesForSpesificName","fetchcurrentCityWeather","fetchcurrentCityDailyWeather","currentCityDailyWeather","Navbar","to","Favorites","style","backgroundColor","cityWeather","Metric","App","path","render","unitsReducer","action","themesReducer","currentCityWeatherReducer","currentDailyWeatherReducer","addToFavoriteCities","cityObj","len","removeFromFavoriteCities","favoriteCitiesReducer","currentCityNameReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c29737b.chunk.js","sourcesContent":["const config = {\r\n    tempEndPoint: 'https://jsonplaceholder.typicode.com/users',\r\n    apikey: 'ZSqquvHhCYForYQWzUKukJNOLbLDOZ1S',\r\n    telAvivKey: '215854',\r\n    baseRoute: 'https://dataservice.accuweather.com',\r\n    autoCompleteApiEndPoint: 'locations/v1/cities/autocomplete',\r\n    currentWeatherEndPoint: 'currentconditions/v1',\r\n    dailyWeatherEndPoint: 'forecasts/v1/daily/5day',\r\n    geoPositionEndPoint: 'locations/v1/cities/geoposition/search'\r\n}\r\n\r\nexport default config;","const ONE_SECOND = 1000;\nconst TEL_AVIV = 'Tel Aviv';\nconst FAHRENHEIT = 'F';\nconst CELSIUS = 'C';\n\nconst DAYS = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat'\n}\n\nexport default {\n    ONE_SECOND,\n    TEL_AVIV,\n    FAHRENHEIT,\n    CELSIUS,\n    DAYS,\n}","import consts from './home.consts';\n\nconst jsonParseFromLocalStorage = (key) => {\n    return JSON.parse(localStorage.getItem(key))\n}\nconst fahrenheitToCelsius = (fahrenheit) => {\n    return (fahrenheit - 32) * (5/9)\n}\n\nconst dateToDayName = (date) => {\n    const splitedDate = new Date(date).getDay()\n    return consts.DAYS[splitedDate]\n}\n\nconst handleTemperature = (units, fahrenheit) => {\n    if (units == consts.FAHRENHEIT) return fahrenheit\n    const celsius = fahrenheitToCelsius(fahrenheit)\n    return Number.parseFloat(celsius).toPrecision(3)\n  }\n\nconst handleTheme = (themes) => {\n    // return 'home-layout-' + appTheme\n    return 'home-layout-' + themes\n}\n\nexport {\n    jsonParseFromLocalStorage,\n    fahrenheitToCelsius,\n    dateToDayName,\n    handleTemperature,\n    handleTheme,\n} ","import React from 'react'\nimport './Like.css'\n\nfunction Like({display}) {\n    return <i className={`fa${display?'s':'r'} fa-heart like-margin`}></i>\n}\n\nexport default Like","import Like from './Like';\n\nexport default Like;","export const toFarhenheit = () => {\r\n    return {\r\n      type: 'TO_FARHENHEIT'\r\n    }\r\n  }\r\n\r\nexport const toCelsius = () => {\r\n  return {\r\n    type: 'TO_CELSIUS'\r\n  }\r\n}\r\n\r\nexport const toLight = () => {\r\n  return {\r\n    type: 'TO_LIGHT'\r\n  }\r\n}\r\n\r\nexport const toDark = () => {\r\n  return {\r\n    type: 'TO_DARK'\r\n  }\r\n}\r\n\r\nexport const changeCurrentCity = (city) => {\r\n  return {\r\n    type: 'CHANGE_CITY',\r\n    payload: city\r\n  }\r\n}\r\n\r\nexport const changeCurrentDaily = (daily) => {\r\n  return {\r\n    type: 'CHANGE_DAILY',\r\n    payload: daily\r\n  }\r\n}\r\n\r\nexport const addToFavoriteCities = (city) => {\r\n  return {\r\n    type: 'ADD_TO_FAVORITE_CITIES',\r\n    payload: city\r\n  }\r\n}\r\n\r\nexport const removeFromFavoriteCities = (city) => {\r\n  return {\r\n    type: 'REMOVE_FROMFAVORITE_CITIES',\r\n    payload: city\r\n  }\r\n}\r\n\r\nexport const changeCityName = (cityName) => {\r\n    return {\r\n    type: 'CHANGE_CITY_NAME',\r\n    payload: cityName\r\n  }\r\n}","import React from 'react';\r\nimport Like from '../like/';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {toCelsius, toFarhenheit, addToFavoriteCities, removeFromFavoriteCities} from '../../actions/';\r\nimport consts from './home.consts';\r\n\r\nconst ButtonsWrapper = ({isCurrentCityInFavoriteList}) => {\r\n    const units = useSelector(state => state.units);\r\n    const currentCityWeather = useSelector(state => state.currentCityWeather)\r\n    const currentCityName = useSelector(state => state.currentCityName)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className='btns-wrapper'>\r\n            <div>\r\n                <button className='btn btn-secondary' onClick={() => dispatch(toCelsius())} hidden={units==consts.CELSIUS?true:false}>celsius</button>\r\n                <button className='btn btn-secondary' onClick={() => dispatch(toFarhenheit())} hidden={units==consts.FAHRENHEIT?true:false}>fahrenheit</button>               \r\n            </div>\r\n            <div>\r\n                <Like  display={isCurrentCityInFavoriteList()}/>\r\n                <button className='btn btn-success' hidden={isCurrentCityInFavoriteList()} onClick={() => dispatch(addToFavoriteCities({'cityWeather': currentCityWeather[0], 'cityName': currentCityName}))}>add to favorites</button>\r\n                <button className='btn btn-danger' hidden={!isCurrentCityInFavoriteList()} onClick={() => dispatch(removeFromFavoriteCities({'cityWeather': currentCityWeather[0], 'cityName': currentCityName}))}>remove from favorites</button>\r\n            </div>  \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default ButtonsWrapper;","import React from 'react';\r\nimport consts from './home.consts';\r\nimport {handleTemperature} from './home.helpers';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst CurrentWeather = () => {\r\n    const units = useSelector(state => state.units);\r\n    const currentCityWeather = useSelector(state => state.currentCityWeather);\r\n    const currentCityName = useSelector(state => state.currentCityName);\r\n\r\n    return (\r\n        <>\r\n            <div className='home-box home-currentWeather'>\r\n                {currentCityName} {currentCityWeather && currentCityWeather.length!=0 && handleTemperature(units, currentCityWeather[0].Temperature.Imperial.Value)}\r\n                <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span>\r\n            </div>\r\n            <div className='home-weatherText'>\r\n                {currentCityWeather && currentCityWeather.length!=0 && currentCityWeather[0].WeatherText}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\nimport _ from 'lodash';\nimport consts from './home.consts';\nimport {handleTemperature, dateToDayName} from './home.helpers';\nimport {useSelector} from 'react-redux';\n\nconst CurrentForecast = () => {\n    const units = useSelector(state => state.units);\n    const dailyWeather = useSelector(state => state.currentDaily);\n    return (\n        <div className='row row-cols-auto'>\n            {!(_.isEmpty(dailyWeather)) && dailyWeather.DailyForecasts.map(e => \n            <div className='home-box home-margin' key={e.EpochDate}> \n                {handleTemperature(units, e.Temperature.Minimum.Value)} - {handleTemperature(units, e.Temperature.Maximum.Value)}\n                <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span>\n                <div>{dateToDayName(e.Date)}</div>\n            </div>)}\n        </div>\n    )\n}\n\nexport default CurrentForecast","import React from 'react';\n\nconst Search = ({textBox, handleTextBoxOnChange, suggestedCities, handleCityOnClick}) => {\n    return (\n        <div className='home-textBox'>\n            <input type=\"text\" placeholder={'Search..'} value={textBox} onChange={e => handleTextBoxOnChange(e.currentTarget.value)}/>\n            <div className=\"home-suggestedCities\">\n                {suggestedCities.length > 0 && \n                <div>\n                    {suggestedCities.map(city =>\n                    <div key={city.Key} className={'home-autocompleteItems'}>\n                        <span onClick={() => handleCityOnClick(city.LocalizedName)}>{city.LocalizedName}</span>\n                    </div>)}\n                </div>}\n            </div>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState, useEffect, useCallback} from 'react'\r\nimport { debounce } from 'lodash'\r\nimport axios from 'axios'\r\nimport config from '../../config';\r\nimport './Home.css'\r\nimport consts from './home.consts'\r\nimport _ from 'lodash'\r\nimport {handleTheme} from './home.helpers';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport ButtonsWrapper from './ButtonsWrapper';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport CurrentForecast from './CurrentForecast';\r\nimport Search from './Search'\r\nimport {changeCurrentCity, changeCurrentDaily, changeCityName} from '../../actions/';\r\n\r\nconst Home = () => {\r\n    const themes = useSelector(state => state.themes);\r\n    const currentWeather = useSelector(state => state.currentCityWeather)\r\n    const favoriteCities = useSelector(state => state.favoriteCities)\r\n    const currentCityName = useSelector(state => state.currentCityName)\r\n    const dispatch = useDispatch();\r\n\r\n    const [suggestedCities, setSuggestedCities] = useState([])\r\n    const [textBox, setTextBox] = useState('')\r\n    const [currentCityKey, setCurrentCityKey] = useState(config.telAvivKey)\r\n\r\n    const autoComplete = useCallback(debounce((value) => handleAutocomplete(value),consts.ONE_SECOND), [])\r\n\r\n    useEffect(() => {\r\n        if (currentWeather.length == 0){\r\n            navigator.geolocation.getCurrentPosition(geoLocationAllowed, geoLocationBlocked)\r\n        }\r\n    }, [])\r\n    \r\n    const handleAutocomplete = async (textBoxValue) => {\r\n        if (textBoxValue.length > 0)\r\n        {\r\n            const results = await axios.get(`${config.baseRoute}/${config.autoCompleteApiEndPoint}`, {params: {apikey: config.apikey, q: textBoxValue} })\r\n            setSuggestedCities(results.data)\r\n        }\r\n        else setSuggestedCities([])\r\n    }\r\n\r\n    const handleTextBoxOnChange = textBoxValue => {\r\n        setTextBox(textBoxValue)\r\n        autoComplete(textBoxValue)\r\n    }\r\n\r\n    const handleCityOnClick = async cityName => {\r\n        setTextBox(cityName)\r\n        const cityKey = suggestedCities.filter(obj => obj.LocalizedName == cityName)[0].Key\r\n        setSuggestedCities([])\r\n        if (cityKey != currentCityKey)\r\n        {\r\n            setForeCastWeather(cityName, cityKey)\r\n        }\r\n    }\r\n\r\n    const isCurrentCityInFavoriteList = () => {\r\n        const filteredFavorites = favoriteCities.filter(favorite => currentCityName == favorite.cityName)\r\n        if (filteredFavorites.length > 0) return true\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div className={handleTheme(themes)}>\r\n\r\n            <Search handleTextBoxOnChange={handleTextBoxOnChange} textBox={textBox} suggestedCities={suggestedCities} handleCityOnClick={handleCityOnClick} />\r\n            \r\n            <ButtonsWrapper \r\n                isCurrentCityInFavoriteList={isCurrentCityInFavoriteList}\r\n            />\r\n            <div className='home-margin'>\r\n                <CurrentWeather />\r\n                <CurrentForecast />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    async function fetchcurrentCityWeather() {\r\n        const {data} = await axios.get(`${config.baseRoute}/${config.currentWeatherEndPoint}/${config.telAvivKey}`, {params: {apikey: config.apikey} })\r\n        dispatch(changeCurrentCity(data))\r\n    }\r\n\r\n    async function fetchcurrentCityDailyWeather() {\r\n        const {data} = await axios.get(`${config.baseRoute}/${config.dailyWeatherEndPoint}/${config.telAvivKey}`, {params: {apikey: config.apikey} })\r\n        dispatch(changeCurrentDaily(data))\r\n    }\r\n\r\n    async function geoLocationAllowed (position){\r\n        const coords = `${position.coords.latitude},${position.coords.longitude}`\r\n        const city = await axios.get(`${config.baseRoute}/${config.geoPositionEndPoint}`, {params: {apikey: config.apikey, q: coords}})\r\n        const cityName = city.data.LocalizedName\r\n        \r\n        const suggestedCitiesForSpesificName = await axios.get(`${config.baseRoute}/${config.autoCompleteApiEndPoint}`, {params: {apikey: config.apikey, q: cityName} })\r\n        const cityKey = suggestedCitiesForSpesificName.data.filter(obj => obj.LocalizedName == cityName)[0].Key\r\n\r\n        setForeCastWeather(cityName, cityKey)                \r\n    }\r\n\r\n    function geoLocationBlocked(){\r\n        fetchcurrentCityWeather()\r\n        fetchcurrentCityDailyWeather()\r\n    }\r\n\r\n    async function setForeCastWeather(cityName, cityKey){\r\n        dispatch(changeCityName(cityName))\r\n        setCurrentCityKey(cityKey)\r\n        const currentCityWeather = await axios.get(`${config.baseRoute}/${config.currentWeatherEndPoint}/${cityKey}`, {params: {apikey: config.apikey} })\r\n        const currentCityDailyWeather = await axios.get(`${config.baseRoute}/${config.dailyWeatherEndPoint}/${cityKey}`, {params: {apikey: config.apikey} })\r\n        dispatch(changeCurrentCity(currentCityWeather.data))\r\n        dispatch(changeCurrentDaily(currentCityDailyWeather.data))\r\n    }\r\n}\r\n\r\nexport default Home;","import Home from './Home';\n\nexport default Home;","import Navbar from './Navbar';\n\nexport default Navbar;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './navbar.css'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {toDark, toLight} from '../../actions/';\n\nconst Navbar = () => {\n  \n    const themes = useSelector(state => state.themes);\n    const dispatch = useDispatch();\n\n    return (\n      <nav className=\"navbar-wrapper\">\n        <div>\n          Ofir Hakshur - Weather App\n        </div>\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/favorites\">Favorites</Link>\n          <button onClick={themes == 'light' ? () => dispatch(toDark()) : () => dispatch(toLight())}>Dark/Light Theme</button>\n        </div>\n      </nav>\n    )\n}\n\nexport default Navbar","import React from 'react'\r\nimport './Favorites.css'\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport consts from '../home/home.consts'\r\n\r\nfunction Favorites() {\r\n    const themes = useSelector(state => state.themes);\r\n    const units = useSelector(state => state.units);\r\n    const favoriteCities = useSelector(state => state.favoriteCities);\r\n\r\n    return (\r\n        <div style={{backgroundColor: themes}}>\r\n            <div className={`favorites-container ${themes}`}>\r\n                <div className=\"row row-cols-auto\">\r\n                    {favoriteCities.map(e => \r\n                    <div className='favorites-box' key={e.cityName}> \r\n                        <div>{e.cityName}</div>\r\n                        <div>{e.cityWeather.Temperature.Metric.Value} <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span></div>\r\n                        <div>{e.cityWeather.WeatherText}</div>\r\n                    </div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favorites","import React, { useState } from 'react'\r\nimport Home from '../home/'\r\nimport Navbar from '../navbar/'\r\nimport { Route, Switch } from 'react-router'\r\nimport Favorites from '../favorites/Favorites'\r\n\r\nconst App = () => {    \r\n    return (\r\n        <>\r\n            <Navbar/>\r\n            <Switch>\r\n                <Route path='/favorites' render={() => <Favorites/>}></Route>\r\n                <Route path='/' render={() => <Home />}></Route>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","const unitsReducer = (state = 'F', action) => {\n    switch (action.type) {\n            case 'TO_FARHENHEIT':\n              return 'F';\n            case 'TO_CELSIUS':\n              return 'C';\n            default:\n                return state;\n    }\n}\n\nexport default unitsReducer;","const themesReducer = (state = 'light', action) => {\r\n    switch (action.type) {\r\n            case 'TO_LIGHT':\r\n              return 'light';\r\n            case 'TO_DARK':\r\n              return 'dark';\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default themesReducer;","const currentCityWeatherReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n            case 'CHANGE_CITY':\r\n              return action.payload;\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default currentCityWeatherReducer;","const currentDailyWeatherReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n            case 'CHANGE_DAILY':\r\n              return action.payload;\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default currentDailyWeatherReducer;","const MAX_FAVORITE_CITIES = 5;\r\nconst TEL_AVIV = 'Tel Aviv';\r\n\r\nexport default {\r\n    MAX_FAVORITE_CITIES,\r\n    TEL_AVIV\r\n}","import consts from './reducers.consts'\r\n\r\nconst favoriteCitiesReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n            case 'ADD_TO_FAVORITE_CITIES':\r\n              return addToFavoriteCities(state, action.payload);\r\n            case 'REMOVE_FROMFAVORITE_CITIES':\r\n              return removeFromFavoriteCities(state, action.payload);\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nconst addToFavoriteCities = (favoriteCities, cityObj) => {\r\n    const len = favoriteCities.length;\r\n    if (len >= 0 && len < consts.MAX_FAVORITE_CITIES)\r\n    {\r\n        const arr = [...favoriteCities, cityObj];\r\n        return arr;\r\n    }\r\n    return favoriteCities;\r\n}\r\nconst removeFromFavoriteCities = (favoriteCities, cityObj) => {\r\n    const len = favoriteCities.filter(e => e.cityName == cityObj.cityName).length;\r\n    if (len != 0)\r\n    {\r\n        const arr = favoriteCities.filter(e => cityObj.cityName != e.cityName);\r\n        return arr;\r\n    }\r\n    return favoriteCities;\r\n}\r\n\r\nexport default favoriteCitiesReducer;","import consts from './reducers.consts'\r\n\r\nconst currentCityNameReducer = (state = consts.TEL_AVIV, action) => {\r\n    switch (action.type) {\r\n            case 'CHANGE_CITY_NAME':\r\n              return action.payload;\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default currentCityNameReducer;","import unitsReducer from './units';\r\nimport themesReducer from './themes';\r\nimport currentCityWeatherReducer from './currentCityWeather';\r\nimport currentDailyWeatherReducer from './currentDaily';\r\nimport favoriteCitiesReducer from './favoriteCities';\r\nimport currentCityNameReducer from './currentCityName'\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({currentCityName: currentCityNameReducer, favoriteCities: favoriteCitiesReducer, units: unitsReducer, themes: themesReducer, currentCityWeather: currentCityWeatherReducer, currentDaily : currentDailyWeatherReducer});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './components/app/App';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n/** REDUX */\r\nimport {createStore} from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport {Provider} from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}