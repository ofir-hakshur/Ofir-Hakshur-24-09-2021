{"version":3,"sources":["config/index.js","components/home/home.consts.js","components/home/home.helpers.js","components/like/Like.jsx","components/like/index.js","actions/index.js","components/home/ButtonsWrapper.jsx","components/home/CurrentWeather.jsx","components/home/CurrentForecast.jsx","components/home/Search.jsx","components/home/Home.jsx","components/home/index.js","components/app/app.consts.js","components/navbar/index.js","components/navbar/Navbar.jsx","components/favorites/Favorites.jsx","components/app/App.jsx","reducers/units.js","reducers/themes.js","reducers/currentCityWeather.js","reducers/currentDaily.js","reducers/index.js","index.js"],"names":["config","tempEndPoint","apikey","telAvivKey","baseRoute","autoCompleteApiEndPoint","currentWeatherEndPoint","dailyWeatherEndPoint","geoPositionEndPoint","ONE_SECOND","TEL_AVIV","FAHRENHEIT","CELSIUS","DAYS","dateToDayName","date","splitedDate","Date","getDay","consts","handleTemperature","units","fahrenheit","celsius","fahrenheitToCelsius","Number","parseFloat","toPrecision","handleTheme","themes","Like","display","className","changeCurrentCity","city","type","payload","changeCurrentDaily","daily","ButtonsWrapper","isCurrentCityInFavoriteList","addToFavorites","removeFromFavorites","currentCityName","useSelector","state","currentCityWeather","dispatch","useDispatch","onClick","hidden","CurrentWeather","name","length","Temperature","Imperial","Value","WeatherText","CurrentForecast","dailyWeather","currentDaily","_","isEmpty","DailyForecasts","map","e","Minimum","Maximum","EpochDate","Search","textBox","handleTextBoxOnChange","suggestedCities","handleCityOnClick","placeholder","value","onChange","currentTarget","LocalizedName","Key","Home","favoriteCities","setCurrentCityName","currentWeather","useState","setSuggestedCities","setTextBox","currentCityKey","setCurrentCityKey","autoComplete","useCallback","debounce","handleAutocomplete","useEffect","navigator","geolocation","getCurrentPosition","geoLocationAllowed","geoLocationBlocked","textBoxValue","a","axios","get","params","q","results","data","cityName","cityKey","filter","obj","setForeCastWeather","favorite","position","coords","latitude","longitude","suggestedCitiesForSpesificName","fetchcurrentCityWeather","fetchcurrentCityDailyWeather","currentCityDailyWeather","Navbar","to","Favorites","style","backgroundColor","cityWeather","Metric","App","setFavoriteCities","handleAddToFavorites","cityObject","len","arr","handleRemoveFromFavorites","path","render","unitsReducer","action","themesReducer","currentCityWeatherReducer","currentDailyWeatherReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f749fce0.chunk.js","sourcesContent":["const config = {\n    tempEndPoint: 'https://jsonplaceholder.typicode.com/users',\n    apikey: 'ZSqquvHhCYForYQWzUKukJNOLbLDOZ1S',\n    telAvivKey: '215854',\n    baseRoute: 'https://dataservice.accuweather.com',\n    autoCompleteApiEndPoint: 'locations/v1/cities/autocomplete',\n    currentWeatherEndPoint: 'currentconditions/v1',\n    dailyWeatherEndPoint: 'forecasts/v1/daily/5day',\n    geoPositionEndPoint: 'locations/v1/cities/geoposition/search'\n}\n\nexport default config;","const ONE_SECOND = 1000;\nconst TEL_AVIV = 'Tel Aviv';\nconst FAHRENHEIT = 'F';\nconst CELSIUS = 'C';\n\nconst DAYS = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat'\n}\n\nexport default {\n    ONE_SECOND,\n    TEL_AVIV,\n    FAHRENHEIT,\n    CELSIUS,\n    DAYS,\n}","import consts from './home.consts';\n\nconst jsonParseFromLocalStorage = (key) => {\n    return JSON.parse(localStorage.getItem(key))\n}\nconst fahrenheitToCelsius = (fahrenheit) => {\n    return (fahrenheit - 32) * (5/9)\n}\n\nconst dateToDayName = (date) => {\n    const splitedDate = new Date(date).getDay()\n    return consts.DAYS[splitedDate]\n}\n\nconst handleTemperature = (units, fahrenheit) => {\n    if (units == consts.FAHRENHEIT) return fahrenheit\n    const celsius = fahrenheitToCelsius(fahrenheit)\n    return Number.parseFloat(celsius).toPrecision(3)\n  }\n\nconst handleTheme = (themes) => {\n    // return 'home-layout-' + appTheme\n    return 'home-layout-' + themes\n}\n\nexport {\n    jsonParseFromLocalStorage,\n    fahrenheitToCelsius,\n    dateToDayName,\n    handleTemperature,\n    handleTheme,\n} ","import React from 'react'\nimport './Like.css'\n\nfunction Like({display}) {\n    return <i className={`fa${display?'s':'r'} fa-heart like-margin`}></i>\n}\n\nexport default Like","import Like from './Like';\n\nexport default Like;","export const toFarhenheit = () => {\r\n    return {\r\n      type: 'TO_FARHENHEIT'\r\n    }\r\n  }\r\n\r\nexport const toCelsius = () => {\r\n  return {\r\n    type: 'TO_CELSIUS'\r\n  }\r\n}\r\n\r\nexport const toLight = () => {\r\n  return {\r\n    type: 'TO_LIGHT'\r\n  }\r\n}\r\n\r\nexport const toDark = () => {\r\n  return {\r\n    type: 'TO_DARK'\r\n  }\r\n}\r\n\r\nexport const changeCurrentCity = (city) => {\r\n  return {\r\n    type: 'CHANGE_CITY',\r\n    payload: city\r\n  }\r\n}\r\n\r\nexport const changeCurrentDaily = (daily) => {\r\n  return {\r\n    type: 'CHANGE_DAILY',\r\n    payload: daily\r\n  }\r\n}","import React from 'react';\r\nimport Like from '../like/';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {toCelsius, toFarhenheit} from '../../actions/';\r\nimport consts from './home.consts';\r\n\r\nconst ButtonsWrapper = ({isCurrentCityInFavoriteList ,addToFavorites, removeFromFavorites, currentCityName}) => {\r\n    const units = useSelector(state => state.units);\r\n    const currentCityWeather = useSelector(state => state.currentCityWeather)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className='btns-wrapper'>\r\n            <div>\r\n                <button className='btn btn-secondary' onClick={() => dispatch(toCelsius())} hidden={units==consts.CELSIUS?true:false}>celsius</button>\r\n                <button className='btn btn-secondary' onClick={() => dispatch(toFarhenheit())} hidden={units==consts.FAHRENHEIT?true:false}>fahrenheit</button>               \r\n            </div>\r\n            <div>\r\n                <Like  display={isCurrentCityInFavoriteList()}/>\r\n                <button className='btn btn-success' hidden={isCurrentCityInFavoriteList()} onClick={() => addToFavorites({'cityWeather': currentCityWeather[0], 'cityName': currentCityName})}>add to favorites</button>\r\n                <button className='btn btn-danger' hidden={!isCurrentCityInFavoriteList()} onClick={() => removeFromFavorites({'cityWeather': currentCityWeather[0], 'cityName': currentCityName})}>remove from favorites</button>\r\n            </div>  \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default ButtonsWrapper;","import React from 'react';\r\nimport consts from './home.consts';\r\nimport {handleTemperature} from './home.helpers';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst CurrentWeather = ({currentCityName: name }) => {\r\n    const units = useSelector(state => state.units);\r\n    const currentCityWeather = useSelector(state => state.currentCityWeather);\r\n\r\n    return (\r\n        <>\r\n            <div className='home-box home-currentWeather'>\r\n                {name} {currentCityWeather && currentCityWeather.length!=0 && handleTemperature(units, currentCityWeather[0].Temperature.Imperial.Value)}\r\n                <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span>\r\n            </div>\r\n            <div className='home-weatherText'>\r\n                {currentCityWeather && currentCityWeather.length!=0 && currentCityWeather[0].WeatherText}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\nimport _ from 'lodash';\nimport consts from './home.consts';\nimport {handleTemperature, dateToDayName} from './home.helpers';\nimport {useSelector} from 'react-redux';\n\nconst CurrentForecast = () => {\n    const units = useSelector(state => state.units);\n    const dailyWeather = useSelector(state => state.currentDaily);\n    return (\n        <div className='row row-cols-auto'>\n            {!(_.isEmpty(dailyWeather)) && dailyWeather.DailyForecasts.map(e => \n            <div className='home-box home-margin' key={e.EpochDate}> \n                {handleTemperature(units, e.Temperature.Minimum.Value)} - {handleTemperature(units, e.Temperature.Maximum.Value)}\n                <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span>\n                <div>{dateToDayName(e.Date)}</div>\n            </div>)}\n        </div>\n    )\n}\n\nexport default CurrentForecast","import React from 'react';\n\nconst Search = ({textBox, handleTextBoxOnChange, suggestedCities, handleCityOnClick}) => {\n    return (\n        <div className='home-textBox'>\n            <input type=\"text\" placeholder={'Search..'} value={textBox} onChange={e => handleTextBoxOnChange(e.currentTarget.value)}/>\n            <div className=\"home-suggestedCities\">\n                {suggestedCities.length > 0 && \n                <div>\n                    {suggestedCities.map(city =>\n                    <div key={city.Key} className={'home-autocompleteItems'}>\n                        <span onClick={() => handleCityOnClick(city.LocalizedName)}>{city.LocalizedName}</span>\n                    </div>)}\n                </div>}\n            </div>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState, useEffect, useCallback} from 'react'\r\nimport { debounce } from 'lodash'\r\nimport axios from 'axios'\r\nimport config from '../../config';\r\nimport './Home.css'\r\nimport consts from './home.consts'\r\nimport _ from 'lodash'\r\nimport {handleTheme} from './home.helpers';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport ButtonsWrapper from './ButtonsWrapper';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport CurrentForecast from './CurrentForecast';\r\nimport Search from './Search'\r\nimport {changeCurrentCity, changeCurrentDaily} from '../../actions/';\r\n\r\nconst Home = ({favoriteCities, addToFavorites, removeFromFavorites, currentCityName, setCurrentCityName}) => {\r\n    const themes = useSelector(state => state.themes);\r\n    const currentWeather = useSelector(state => state.currentCityWeather)\r\n    const dispatch = useDispatch();\r\n\r\n    const [suggestedCities, setSuggestedCities] = useState([])\r\n    const [textBox, setTextBox] = useState('')\r\n    const [currentCityKey, setCurrentCityKey] = useState(config.telAvivKey)\r\n\r\n    const autoComplete = useCallback(debounce((value) => handleAutocomplete(value),consts.ONE_SECOND), [])\r\n\r\n    useEffect(() => {\r\n        if (currentWeather.length == 0){\r\n            navigator.geolocation.getCurrentPosition(geoLocationAllowed, geoLocationBlocked)\r\n        }\r\n    }, [])\r\n    \r\n    const handleAutocomplete = async (textBoxValue) => {\r\n        if (textBoxValue.length > 0)\r\n        {\r\n            const results = await axios.get(`${config.baseRoute}/${config.autoCompleteApiEndPoint}`, {params: {apikey: config.apikey, q: textBoxValue} })\r\n            setSuggestedCities(results.data)\r\n        }\r\n        else setSuggestedCities([])\r\n    }\r\n\r\n    const handleTextBoxOnChange = textBoxValue => {\r\n        setTextBox(textBoxValue)\r\n        autoComplete(textBoxValue)\r\n    }\r\n\r\n    const handleCityOnClick = async cityName => {\r\n        setTextBox(cityName)\r\n        const cityKey = suggestedCities.filter(obj => obj.LocalizedName == cityName)[0].Key\r\n        setSuggestedCities([])\r\n        if (cityKey != currentCityKey)\r\n        {\r\n            setForeCastWeather(cityName, cityKey)\r\n        }\r\n    }\r\n\r\n    const isCurrentCityInFavoriteList = () => {\r\n        const filteredFavorites = favoriteCities.filter(favorite => currentCityName == favorite.cityName)\r\n        if (filteredFavorites.length > 0) return true\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div className={handleTheme(themes)}>\r\n\r\n            <Search handleTextBoxOnChange={handleTextBoxOnChange} textBox={textBox} suggestedCities={suggestedCities} handleCityOnClick={handleCityOnClick} />\r\n            \r\n            <ButtonsWrapper \r\n                isCurrentCityInFavoriteList={isCurrentCityInFavoriteList}\r\n                addToFavorites={addToFavorites}\r\n                removeFromFavorites={removeFromFavorites}\r\n                currentCityName={currentCityName}\r\n            />\r\n            <div className='home-margin'>\r\n                <CurrentWeather currentCityName={currentCityName}/>\r\n                <CurrentForecast />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    async function fetchcurrentCityWeather() {\r\n        const {data} = await axios.get(`${config.baseRoute}/${config.currentWeatherEndPoint}/${config.telAvivKey}`, {params: {apikey: config.apikey} })\r\n        dispatch(changeCurrentCity(data))\r\n    }\r\n\r\n    async function fetchcurrentCityDailyWeather() {\r\n        const {data} = await axios.get(`${config.baseRoute}/${config.dailyWeatherEndPoint}/${config.telAvivKey}`, {params: {apikey: config.apikey} })\r\n        dispatch(changeCurrentDaily(data))\r\n    }\r\n\r\n    async function geoLocationAllowed (position){\r\n        const coords = `${position.coords.latitude},${position.coords.longitude}`\r\n        const city = await axios.get(`${config.baseRoute}/${config.geoPositionEndPoint}`, {params: {apikey: config.apikey, q: coords}})\r\n        const cityName = city.data.LocalizedName\r\n        \r\n        const suggestedCitiesForSpesificName = await axios.get(`${config.baseRoute}/${config.autoCompleteApiEndPoint}`, {params: {apikey: config.apikey, q: cityName} })\r\n        const cityKey = suggestedCitiesForSpesificName.data.filter(obj => obj.LocalizedName == cityName)[0].Key\r\n\r\n        setForeCastWeather(cityName, cityKey)                \r\n    }\r\n\r\n    function geoLocationBlocked(){\r\n        fetchcurrentCityWeather()\r\n        fetchcurrentCityDailyWeather()\r\n    }\r\n\r\n    async function setForeCastWeather(cityName, cityKey){\r\n        setCurrentCityName(cityName)\r\n        setCurrentCityKey(cityKey)\r\n        const currentCityWeather = await axios.get(`${config.baseRoute}/${config.currentWeatherEndPoint}/${cityKey}`, {params: {apikey: config.apikey} })\r\n        const currentCityDailyWeather = await axios.get(`${config.baseRoute}/${config.dailyWeatherEndPoint}/${cityKey}`, {params: {apikey: config.apikey} })\r\n        dispatch(changeCurrentCity(currentCityWeather.data))\r\n        dispatch(changeCurrentDaily(currentCityDailyWeather.data))\r\n    }\r\n}\r\n\r\nexport default Home;","import Home from './Home';\n\nexport default Home;","const MAX_FAVORITE_CITIES = 5;\nconst TEL_AVIV = 'Tel Aviv';\n\nexport default {\n    MAX_FAVORITE_CITIES,\n    TEL_AVIV\n}","import Navbar from './Navbar';\n\nexport default Navbar;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './navbar.css'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {toDark, toLight} from '../../actions/';\n\nconst Navbar = () => {\n  \n    const themes = useSelector(state => state.themes);\n    const dispatch = useDispatch();\n\n    return (\n      <nav className=\"navbar-wrapper\">\n        <div>\n          Herolo weather task - Ofir Hakshur\n        </div>\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/favorites\">Favorites</Link>\n          <button onClick={themes == 'light' ? () => dispatch(toDark()) : () => dispatch(toLight())}>Dark/Light Theme</button>\n        </div>\n      </nav>\n    )\n}\n\nexport default Navbar","import React from 'react'\r\nimport './Favorites.css'\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport consts from '../home/home.consts'\r\n\r\nfunction Favorites({favoriteCities}) {\r\n    const themes = useSelector(state => state.themes);\r\n    const units = useSelector(state => state.units);\r\n\r\n    return (\r\n        <div style={{backgroundColor: themes}}>\r\n            <div className={`favorites-container ${themes}`}>\r\n                <div className=\"row row-cols-auto\">\r\n                    {favoriteCities.map(e => \r\n                    <div className='favorites-box' key={e.cityName}> \r\n                        <div>{e.cityName}</div>\r\n                        <div>{e.cityWeather.Temperature.Metric.Value} <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span></div>\r\n                        <div>{e.cityWeather.WeatherText}</div>\r\n                    </div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favorites","import React, { useState } from 'react'\r\nimport Home from '../home/'\r\nimport consts from './app.consts'\r\nimport Navbar from '../navbar/'\r\nimport { Route, Switch } from 'react-router'\r\nimport Favorites from '../favorites/Favorites'\r\n\r\nconst App = () => {\r\n    const [favoriteCities, setFavoriteCities] = useState([])\r\n    const [currentCityName, setCurrentCityName] = useState(consts.TEL_AVIV)\r\n\r\n    const handleAddToFavorites = (cityObject) => {\r\n        const len = favoriteCities.length\r\n        if (len >= 0 && len < consts.MAX_FAVORITE_CITIES)\r\n        {\r\n            const arr = [...favoriteCities, cityObject]\r\n            setFavoriteCities(arr)\r\n        }\r\n    }\r\n\r\n    const handleRemoveFromFavorites = (cityObject) => {\r\n        const len = favoriteCities.filter(e => e.cityName == cityObject.cityName).length\r\n        if (len != 0)\r\n        {\r\n            const arr = favoriteCities.filter(e => cityObject.cityName != e.cityName)\r\n            setFavoriteCities(arr)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Navbar/>\r\n            <Switch>\r\n                <Route path='/favorites' render={() => <Favorites favoriteCities={favoriteCities}/>}></Route>\r\n                <Route path='/' render={() => <Home currentCityName={currentCityName} setCurrentCityName={setCurrentCityName} addToFavorites={handleAddToFavorites} removeFromFavorites={handleRemoveFromFavorites} favoriteCities={favoriteCities}/>}></Route>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","const unitsReducer = (state = 'F', action) => {\n    switch (action.type) {\n            case 'TO_FARHENHEIT':\n              return 'F';\n            case 'TO_CELSIUS':\n              return 'C';\n            default:\n                return state;\n    }\n}\n\nexport default unitsReducer;","const themesReducer = (state = 'light', action) => {\r\n    switch (action.type) {\r\n            case 'TO_LIGHT':\r\n              return 'light';\r\n            case 'TO_DARK':\r\n              return 'dark';\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default themesReducer;","const currentCityWeatherReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n            case 'CHANGE_CITY':\r\n              return action.payload;\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default currentCityWeatherReducer;","const currentDailyWeatherReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n            case 'CHANGE_DAILY':\r\n              return action.payload;\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default currentDailyWeatherReducer;","import unitsReducer from './units';\r\nimport themesReducer from './themes';\r\nimport currentCityWeatherReducer from './currentCityWeather';\r\nimport currentDailyWeatherReducer from './currentDaily';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({units: unitsReducer, themes: themesReducer, currentCityWeather: currentCityWeatherReducer, currentDaily : currentDailyWeatherReducer});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './components/app/App';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n/** REDUX */\r\nimport {createStore} from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport {Provider} from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}