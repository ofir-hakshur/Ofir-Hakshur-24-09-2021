{"version":3,"sources":["config/index.js","components/home/home.consts.js","components/home/home.helpers.js","components/like/Like.jsx","components/like/index.js","components/home/ButtonsWrapper.jsx","actions/index.js","components/home/CurrentWeather.jsx","components/home/CurrentForecast.jsx","components/home/Search.jsx","components/home/Home.jsx","components/home/index.js","components/app/app.consts.js","components/navbar/index.js","components/navbar/Navbar.jsx","components/favorites/Favorites.jsx","components/app/App.jsx","reducers/units.js","reducers/themes.js","reducers/index.js","index.js"],"names":["config","tempEndPoint","apikey","telAvivKey","baseRoute","autoCompleteApiEndPoint","currentWeatherEndPoint","dailyWeatherEndPoint","geoPositionEndPoint","ONE_SECOND","TEL_AVIV","FAHRENHEIT","CELSIUS","DAYS","dateToDayName","date","splitedDate","Date","getDay","consts","handleTemperature","units","fahrenheit","celsius","fahrenheitToCelsius","Number","parseFloat","toPrecision","handleTheme","themes","Like","display","className","ButtonsWrapper","currentCityWeather","isCurrentCityInFavoriteList","addToFavorites","removeFromFavorites","currentCityName","useSelector","state","dispatch","useDispatch","onClick","type","hidden","CurrentWeather","name","weather","length","Temperature","Imperial","Value","WeatherText","CurrentForecast","currentCityDailyWeather","_","isEmpty","DailyForecasts","map","e","Minimum","Maximum","EpochDate","Search","textBox","handleTextBoxOnChange","suggestedCities","handleCityOnClick","placeholder","value","onChange","currentTarget","city","LocalizedName","Key","Home","favoriteCities","setCurrentCityWeather","setCurrentCityDailyWeather","useState","setSuggestedCities","setTextBox","setCurrentCityName","currentCityKey","setCurrentCityKey","autoComplete","useCallback","debounce","handleAutocomplete","useEffect","navigator","geolocation","getCurrentPosition","geoLocationAllowed","geoLocationBlocked","textBoxValue","a","axios","get","params","q","results","data","cityName","cityKey","filter","obj","setForeCastWeather","favorite","position","coords","latitude","longitude","suggestedCitiesForSpesificName","fetchcurrentCityWeather","fetchcurrentCityDailyWeather","Navbar","to","Favorites","style","backgroundColor","cityWeather","Metric","App","setFavoriteCities","handleAddToFavorites","cityObject","len","arr","handleRemoveFromFavorites","path","render","unitsReducer","action","themesReducer","rootReducer","combineReducers","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.332ab7e9.chunk.js","sourcesContent":["const config = {\n    tempEndPoint: 'https://jsonplaceholder.typicode.com/users',\n    //apikey: 'ZSqquvHhCYForYQWzUKukJNOLbLDOZ1S',\n    apikey: 'H8fDv5gREko67t9XQ5yCxJPdM1sGfjm2',\n    telAvivKey: '215854',\n    baseRoute: 'https://dataservice.accuweather.com',\n    autoCompleteApiEndPoint: 'locations/v1/cities/autocomplete',\n    currentWeatherEndPoint: 'currentconditions/v1',\n    dailyWeatherEndPoint: 'forecasts/v1/daily/5day',\n    geoPositionEndPoint: 'locations/v1/cities/geoposition/search'\n}\n\nexport default config;","const ONE_SECOND = 1000;\nconst TEL_AVIV = 'Tel Aviv';\nconst FAHRENHEIT = 'F';\nconst CELSIUS = 'C';\n\nconst DAYS = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat'\n}\n\nexport default {\n    ONE_SECOND,\n    TEL_AVIV,\n    FAHRENHEIT,\n    CELSIUS,\n    DAYS,\n}","import consts from './home.consts';\n\nconst jsonParseFromLocalStorage = (key) => {\n    return JSON.parse(localStorage.getItem(key))\n}\nconst fahrenheitToCelsius = (fahrenheit) => {\n    return (fahrenheit - 32) * (5/9)\n}\n\nconst dateToDayName = (date) => {\n    const splitedDate = new Date(date).getDay()\n    return consts.DAYS[splitedDate]\n}\n\nconst handleTemperature = (units, fahrenheit) => {\n    if (units == consts.FAHRENHEIT) return fahrenheit\n    const celsius = fahrenheitToCelsius(fahrenheit)\n    return Number.parseFloat(celsius).toPrecision(3)\n  }\n\nconst handleTheme = (themes) => {\n    // return 'home-layout-' + appTheme\n    return 'home-layout-' + themes\n}\n\nexport {\n    jsonParseFromLocalStorage,\n    fahrenheitToCelsius,\n    dateToDayName,\n    handleTemperature,\n    handleTheme,\n} ","import React from 'react'\nimport './Like.css'\n\nfunction Like({display}) {\n    return <i className={`fa${display?'s':'r'} fa-heart like-margin`}></i>\n}\n\nexport default Like","import Like from './Like';\n\nexport default Like;","import React from 'react';\r\nimport Like from '../like/';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {toCelsius, toFarhenheit} from '../../actions/';\r\nimport consts from './home.consts';\r\n\r\nconst ButtonsWrapper = ({currentCityWeather, isCurrentCityInFavoriteList , addToFavorites,removeFromFavorites, currentCityName}) => {\r\n    const units = useSelector(state => state.units);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className='btns-wrapper'>\r\n            <div>\r\n                <button className='btn btn-secondary' onClick={() => dispatch(toCelsius())} hidden={units==consts.CELSIUS?true:false}>celsius</button>\r\n                <button className='btn btn-secondary' onClick={() => dispatch(toFarhenheit())} hidden={units==consts.FAHRENHEIT?true:false}>fahrenheit</button>               \r\n            </div>\r\n            <div>\r\n                <Like  display={isCurrentCityInFavoriteList()}/>\r\n                <button className='btn btn-success' hidden={isCurrentCityInFavoriteList()} onClick={() => addToFavorites({'cityWeather': currentCityWeather[0], 'cityName': currentCityName})}>add to favorites</button>\r\n                <button className='btn btn-danger' hidden={!isCurrentCityInFavoriteList()} onClick={() => removeFromFavorites({'cityWeather': currentCityWeather[0], 'cityName': currentCityName})}>remove from favorites</button>\r\n            </div>  \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default ButtonsWrapper;","export const toFarhenheit = () => {\r\n    return {\r\n      type: 'TO_FARHENHEIT'\r\n    }\r\n  }\r\n\r\nexport const toCelsius = () => {\r\n  return {\r\n    type: 'TO_CELSIUS'\r\n  }\r\n}\r\n\r\nexport const toLight = () => {\r\n  return {\r\n  type: 'TO_LIGHT'\r\n  }\r\n}\r\n\r\nexport const toDark = () => {\r\n  return {\r\n  type: 'TO_DARK'\r\n  }\r\n}","import React from 'react';\r\nimport consts from './home.consts';\r\nimport {handleTemperature} from './home.helpers';\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst CurrentWeather = ({currentCityName: name, currentCityWeather: weather }) => {\r\n    const units = useSelector(state => state.units);\r\n\r\n    return (\r\n        <>\r\n            <div className='home-box home-currentWeather'>\r\n                {name} {weather && weather.length!=0 && handleTemperature(units, weather[0].Temperature.Imperial.Value)}\r\n                <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span>\r\n            </div>\r\n            <div className='home-weatherText'>\r\n                {weather && weather.length!=0 && weather[0].WeatherText}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\nimport _ from 'lodash';\nimport consts from './home.consts';\nimport {handleTemperature, dateToDayName} from './home.helpers';\nimport {useSelector} from 'react-redux';\n\nconst CurrentForecast = ({currentCityDailyWeather}) => {\n    const units = useSelector(state => state.units);\n    return (\n        <div className='row row-cols-auto'>\n            {!(_.isEmpty(currentCityDailyWeather)) && currentCityDailyWeather.DailyForecasts.map(e => \n            <div className='home-box home-margin' key={e.EpochDate}> \n                {handleTemperature(units, e.Temperature.Minimum.Value)} - {handleTemperature(units, e.Temperature.Maximum.Value)}\n                <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span>\n                <div>{dateToDayName(e.Date)}</div>\n            </div>)}\n        </div>\n    )\n}\n\nexport default CurrentForecast","import React from 'react';\n\nconst Search = ({textBox, handleTextBoxOnChange, suggestedCities, handleCityOnClick}) => {\n    return (\n        <div className='home-textBox'>\n            <input type=\"text\" placeholder={'Search..'} value={textBox} onChange={e => handleTextBoxOnChange(e.currentTarget.value)}/>\n            <div className=\"home-suggestedCities\">\n                {suggestedCities.length > 0 && \n                <div>\n                    {suggestedCities.map(city =>\n                    <div key={city.Key} className={'home-autocompleteItems'}>\n                        <span onClick={() => handleCityOnClick(city.LocalizedName)}>{city.LocalizedName}</span>\n                    </div>)}\n                </div>}\n            </div>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState, useEffect, useCallback} from 'react'\r\nimport { debounce } from 'lodash'\r\nimport axios from 'axios'\r\nimport config from '../../config';\r\nimport './Home.css'\r\nimport consts from './home.consts'\r\nimport _ from 'lodash'\r\nimport {handleTheme} from './home.helpers';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport ButtonsWrapper from './ButtonsWrapper';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport CurrentForecast from './CurrentForecast';\r\nimport Search from './Search'\r\n\r\nconst Home = ({favoriteCities, addToFavorites, removeFromFavorites, currentCityWeather, setCurrentCityWeather, currentCityDailyWeather, setCurrentCityDailyWeather}) => {\r\n    const themes = useSelector(state => state.themes);\r\n    \r\n    const [suggestedCities, setSuggestedCities] = useState([])\r\n    const [textBox, setTextBox] = useState('')\r\n    const [currentCityName, setCurrentCityName] = useState(consts.TEL_AVIV)\r\n    const [currentCityKey, setCurrentCityKey] = useState(config.telAvivKey)\r\n\r\n    const autoComplete = useCallback(debounce((value) => handleAutocomplete(value),consts.ONE_SECOND), [])\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(geoLocationAllowed, geoLocationBlocked)\r\n    }, [])\r\n    \r\n    const handleAutocomplete = async (textBoxValue) => {\r\n        if (textBoxValue.length > 0)\r\n        {\r\n            //comment the following when real fetch is needed\r\n            //setSuggestedCities(jsonParseFromLocalStorage('autoComplete'))\r\n            //Uncomment it for real fetch data\r\n            const results = await axios.get(`${config.baseRoute}/${config.autoCompleteApiEndPoint}`, {params: {apikey: config.apikey, q: textBoxValue} })\r\n            setSuggestedCities(results.data)\r\n        }\r\n        else setSuggestedCities([])\r\n    }\r\n\r\n    const handleTextBoxOnChange = textBoxValue => {\r\n        setTextBox(textBoxValue)\r\n        autoComplete(textBoxValue)\r\n    }\r\n\r\n    const handleCityOnClick = async cityName => {\r\n        setTextBox(cityName)\r\n        const cityKey = suggestedCities.filter(obj => obj.LocalizedName == cityName)[0].Key\r\n        setSuggestedCities([])\r\n        if (cityKey != currentCityKey)\r\n        {\r\n            setForeCastWeather(cityName, cityKey)\r\n        }\r\n    }\r\n\r\n    const isCurrentCityInFavoriteList = () => {\r\n        const filteredFavorites = favoriteCities.filter(favorite => currentCityName == favorite.cityName)\r\n        if (filteredFavorites.length > 0) return true\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div className={handleTheme(themes)}>\r\n            <Search handleTextBoxOnChange={handleTextBoxOnChange} textBox={textBox} suggestedCities={suggestedCities} handleCityOnClick={handleCityOnClick} />\r\n\r\n            <ButtonsWrapper \r\n                currentCityWeather={currentCityWeather}\r\n                isCurrentCityInFavoriteList={isCurrentCityInFavoriteList}\r\n                addToFavorites={addToFavorites}\r\n                removeFromFavorites={removeFromFavorites}\r\n                currentCityName={currentCityName}\r\n            />\r\n            <div className='home-margin'>\r\n                <CurrentWeather currentCityName={currentCityName} currentCityWeather={currentCityWeather} />\r\n                <CurrentForecast currentCityDailyWeather={currentCityDailyWeather} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    async function fetchcurrentCityWeather() {\r\n        const results = await axios.get(`${config.baseRoute}/${config.currentWeatherEndPoint}/${config.telAvivKey}`, {params: {apikey: config.apikey} })\r\n        setCurrentCityWeather(results.data)\r\n    }\r\n\r\n    async function fetchcurrentCityDailyWeather() {\r\n        const results = await axios.get(`${config.baseRoute}/${config.dailyWeatherEndPoint}/${config.telAvivKey}`, {params: {apikey: config.apikey} })\r\n        setCurrentCityDailyWeather(results.data)\r\n    }\r\n\r\n    async function geoLocationAllowed (position){\r\n        const coords = `${position.coords.latitude},${position.coords.longitude}`\r\n        const city = await axios.get(`${config.baseRoute}/${config.geoPositionEndPoint}`, {params: {apikey: config.apikey, q: coords}})\r\n        const cityName = city.data.LocalizedName\r\n        \r\n        const suggestedCitiesForSpesificName = await axios.get(`${config.baseRoute}/${config.autoCompleteApiEndPoint}`, {params: {apikey: config.apikey, q: cityName} })\r\n        const cityKey = suggestedCitiesForSpesificName.data.filter(obj => obj.LocalizedName == cityName)[0].Key\r\n\r\n        setForeCastWeather(cityName, cityKey)                \r\n    }\r\n\r\n    function geoLocationBlocked(){\r\n        fetchcurrentCityWeather()\r\n        fetchcurrentCityDailyWeather()\r\n    }\r\n\r\n    async function setForeCastWeather(cityName, cityKey){\r\n        setCurrentCityName(cityName)\r\n        setCurrentCityKey(cityKey)\r\n        const currentCityWeather = await axios.get(`${config.baseRoute}/${config.currentWeatherEndPoint}/${cityKey}`, {params: {apikey: config.apikey} })\r\n        const currentCityDailyWeather = await axios.get(`${config.baseRoute}/${config.dailyWeatherEndPoint}/${cityKey}`, {params: {apikey: config.apikey} })\r\n        setCurrentCityWeather(currentCityWeather.data)\r\n        setCurrentCityDailyWeather(currentCityDailyWeather.data)\r\n    }\r\n}\r\n\r\nexport default Home;","import Home from './Home';\n\nexport default Home;","const MAX_FAVORITE_CITIES = 5;\n\nexport default {\n    MAX_FAVORITE_CITIES,\n}","import Navbar from './Navbar';\n\nexport default Navbar;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './navbar.css'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {toDark, toLight} from '../../actions/';\n\nconst Navbar = () => {\n  \n    const themes = useSelector(state => state.themes);\n    const dispatch = useDispatch();\n\n    return (\n      <nav className=\"navbar-wrapper\">\n        <div>\n          Herolo weather task - Ofir Hakshur\n        </div>\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/favorites\">Favorites</Link>\n          <button onClick={themes == 'light' ? () => dispatch(toDark()) : () => dispatch(toLight())}>Dark/Light Theme</button>\n        </div>\n      </nav>\n    )\n}\n\nexport default Navbar","import React from 'react'\r\nimport './Favorites.css'\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport consts from '../home/home.consts'\r\n\r\nfunction Favorites({favoriteCities}) {\r\n    const themes = useSelector(state => state.themes);\r\n    const units = useSelector(state => state.units);\r\n\r\n    return (\r\n        <div style={{backgroundColor: themes}}>\r\n            <div className={`favorites-container ${themes}`}>\r\n                <div className=\"row row-cols-auto\">\r\n                    {favoriteCities.map(e => \r\n                    <div className='favorites-box' key={e.cityName}> \r\n                        <div>{e.cityName}</div>\r\n                        <div>{e.cityWeather.Temperature.Metric.Value} <span className='home-minorMargin'>{units == consts.FAHRENHEIT ? <span>&#8457;</span> : <span>&#8451;</span>}</span></div>\r\n                        <div>{e.cityWeather.WeatherText}</div>\r\n                    </div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favorites","import React, { useState } from 'react'\r\nimport Home from '../home/'\r\nimport consts from './app.consts'\r\nimport Navbar from '../navbar/'\r\nimport { Route, Switch } from 'react-router'\r\nimport Favorites from '../favorites/Favorites'\r\nimport {jsonParseFromLocalStorage} from './app.helpers';\r\n\r\nconst App = () => {\r\n    const [currentCityWeather, setCurrentCityWeather] = useState([])//jsonParseFromLocalStorage('telAvivCurrentWeather')) //need to reboots with []\r\n    const [currentCityDailyWeather, setCurrentCityDailyWeather] = useState({})//jsonParseFromLocalStorage('fetchTelAvivDailyWeather')) //need to reboots with {}\r\n    const [favoriteCities, setFavoriteCities] = useState([])\r\n\r\n    const handleAddToFavorites = (cityObject) => {\r\n        const len = favoriteCities.length\r\n        if (len >= 0 && len < consts.MAX_FAVORITE_CITIES)\r\n        {\r\n            const arr = [...favoriteCities, cityObject]\r\n            setFavoriteCities(arr)\r\n        }\r\n    }\r\n\r\n    const handleRemoveFromFavorites = (cityObject) => {\r\n        const len = favoriteCities.filter(e => e.cityName == cityObject.cityName).length\r\n        if (len != 0)\r\n        {\r\n            const arr = favoriteCities.filter(e => cityObject.cityName != e.cityName)\r\n            setFavoriteCities(arr)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Navbar/>\r\n            <Switch>\r\n                <Route path='/favorites' render={() => <Favorites favoriteCities={favoriteCities}/>}></Route>\r\n                <Route path='/' render={() => <Home currentCityDailyWeather={currentCityDailyWeather} setCurrentCityDailyWeather={setCurrentCityDailyWeather} currentCityWeather={currentCityWeather} setCurrentCityWeather={setCurrentCityWeather} addToFavorites={handleAddToFavorites} removeFromFavorites={handleRemoveFromFavorites} favoriteCities={favoriteCities}/>}></Route>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","const unitsReducer = (state = 'F', action) => {\n    switch (action.type) {\n            case 'TO_FARHENHEIT':\n              return 'F';\n            case 'TO_CELSIUS':\n              return 'C';\n            default:\n                return state;\n    }\n}\n\nexport default unitsReducer;","const themesReducer = (state = 'light', action) => {\r\n    switch (action.type) {\r\n            case 'TO_LIGHT':\r\n              return 'light';\r\n            case 'TO_DARK':\r\n              return 'dark';\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default themesReducer;","import unitsReducer from './units';\r\nimport themesReducer from './themes';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({units: unitsReducer, themes: themesReducer});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './components/app/App';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n/** REDUX */\r\nimport {createStore} from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport {Provider} from 'react-redux';\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}